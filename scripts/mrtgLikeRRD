#!/bin/bash

# This script is part of a collection of scripts to emulate creation
# of MRTG like pages while using RRDTool as a backend.
# This script collects values from sources, puts them into the RRD file
# and creates the page for this source.
# Additional infos (including a license notice) are at the end of this file.

errorExit () {
	echo Error "(${CONFIG}): $*"
	exit 1
}


BASEDIR=/etc/mrtgLikeRRD
BASECONFIG=${BASEDIR}/base.config

if [ $# -ne 1 ]; then
	echo "Error: Please provide config for target as first parameter"
	exit
fi
if [ ! -f ${BASECONFIG} ]; then
	echo "Error: base config ${BASECONFIG} not found"
	exit
fi
. ${BASECONFIG}
CONFIG=$1
if [ "x${DBDIR}" = x ]; then
	errorExit "DBDIR not defined"
fi
if [ "x${OUTPUTDIR}" = x ]; then
	errorExit "OUTPUTDIR not defined"
fi
if [ "x${TARGETDIR}" = x ]; then
	errorExit "TARGETDIR not defined"
fi
if [ ! -d ${DBDIR} ]; then
	errorExit "DBDIR '${DBDIR}' not found"
fi
if [ ! -d ${OUTPUTDIR} ]; then
	errorExit "OUTPUTDIR '${OUTPUTDIR}' not found"
fi
if [ ! -d ${TARGETDIR} ]; then
	errorExit "TARGETDIR '${TARGETDIR}' not found"
fi
if [ ! -f ${TARGETDIR}/$1 ]; then
	errorExit "given config for target '$1' not found"
fi
. ${TARGETDIR}/$1
if [ "x${RRDFILE}" = x ]; then
	errorExit "RRDFILE not defined"
fi
if [ "x${BASENAME}" = x ]; then
	errorExit "BASENAME not defined"
fi
if [ "x${PAGETITLE}" = x ]; then
	errorExit "PAGETITLE not defined"
fi
if [ "x${OUTPUT}" = x ]; then
	errorExit "OUTPUT not defined"
fi
if [ "x${IN_SHORT}" = x ]; then
	errorExit "IN_SHORT not defined"
fi
if [ "x${OUT_SHORT}" = x ]; then
	errorExit "OUT_SHORT not defined"
fi
if [ "x${IN_LONG}" = x ]; then
	errorExit "IN_LONG not defined"
fi
if [ "x${OUT_LONG}" = x ]; then
	errorExit "OUT_LONG not defined"
fi
if [ "x${SOURCE_CMD}" = x ]; then
	errorExit "SOURCE_CMD not defined"
fi
if [ "x${BITS}" = x ]; then
	errorExit "BITS not defined"
fi
if [ "x${UNIT_IN}" = x ]; then
	errorExit "UNIT_IN not defined"
fi
if [ "x${UNIT_OUT}" = x ]; then
	errorExit "UNIT_OUT not defined"
fi
if [ x${USE_SI} = x ]; then
	errorExit "USE_SI not defined"
fi
if [ "${OUTPUT}" != I -a "${OUTPUT}" != O -a "${OUTPUT}" != B -a "${OUTPUT}" != R ]; then
	errorExit "Invalid value '${OUTPUT}' for 'OUTPUT', must be 'I' (In), 'O' (Out), 'B' (Both) or 'R' (Reverse)"
fi
if [ "${BITS}" != Y -a "${BITS}" != N ]; then
	errorExit "Invalid value '${BITS}'for 'BITS', must be 'Y' or 'N'"
fi
if [ "${USE_SI}" != Y -a "${USE_SI}" != N ]; then
	errorExit "Invalid value '${USE_SI}' for 'USE_SI', must be 'Y' or 'N'"
fi
if [ ! -f ${DBDIR}/${RRDFILE} ]; then
	errorExit "RRD-file '${DBDIR}/${RRDFILE}' not found"
fi

### VALIDATION ENDS

if [ $BITS = 'Y' ]; then
	FACTOR=8
else
	FACTOR=1
fi
UNIT_IN=`echo ${UNIT_IN} | sed 's/%/%%/g'`
UNIT_OUT=`echo ${UNIT_OUT} | sed 's/%/%%/g'`
UNIT_IN=`echo ${UNIT_IN} | sed 's/\\//\\\\\//g'`
UNIT_OUT=`echo ${UNIT_OUT} | sed 's/\\//\\\\\//g'`
if [ $USE_SI = 'Y' ]; then
	UNIT_IN="%s${UNIT_IN}"
	UNIT_OUT="%s${UNIT_OUT}"
fi

IN_RE='s/###IN_(START|END)###//g'
OUT_RE='s/###OUT_(START|END)###//g'

# If only "output" shall be generated, remove all "IN"-Sections
if [ ${OUTPUT} = 'O' ]; then
	IN_RE='s/###IN_START###.*###IN_END###//'
fi

# If only "input" shall be generated, remove all "OUT"-Sections
if [ ${OUTPUT} = 'I' ]; then
	OUT_RE='s/###OUT_START###.*###OUT_END###//'
fi

export LC_ALL=de_AT.UTF-8
# calculate red vertical lines
CUR_DAY=`date +%d`
CUR_MON=`date +%m`
CUR_YEAR=`date +%Y`
CUR_DOW=`date +%u`
PREV_YEAR=$[ $CUR_YEAR - 1 ]

LAST_MIDNIGHT=`date +%s --date ${CUR_YEAR}-${CUR_MON}-${CUR_DAY}`
PREV_MIDNIGHT=`date +%s --date ${CUR_YEAR}-${CUR_MON}-${CUR_DAY}\ -1\ day`

CUR_DOW=$[ $CUR_DOW - 1 ];
LAST_WEEK=`date +%s --date ${CUR_YEAR}-${CUR_MON}-${CUR_DAY}\ -${CUR_DOW}\ days`
CUR_DOW=$[ $CUR_DOW + 7 ];
PREV_WEEK=`date +%s --date ${CUR_YEAR}-${CUR_MON}-${CUR_DAY}\ -${CUR_DOW}\ days`

LAST_MONTH=`date +%s --date ${CUR_YEAR}-${CUR_MON}-1`
PREV_MONTH=`date +%s --date ${CUR_YEAR}-${CUR_MON}-1\ -1\ month`

LAST_YEAR=`date +%s --date ${CUR_YEAR}-1-1`
PREV_YEAR=`date +%s --date ${PREV_YEAR}-1-1`
# AF - one pixel off (2020-01-01)
LAST_YEAR=$[ ${LAST_YEAR} + 86400 ]
# AF, 20201202/20210103 - not off anymore
#PREV_YEAR=$[ ${PREV_YEAR} + 86400 ]
#LAST_MONTH=$[ ${LAST_MONTH} - 7200 ]
#PREV_MONTH=$[ ${PREV_MONTH} - 7200 ]

# provide some values in case we don't get any answer at all
result[0]='UNKNOWN'
result[1]='UNKNOWN'
result[2]='an unknown time'
result[3]='unknown system'

cnt=0

while read -r line; do
	result[$cnt]=${line}
	cnt=$((cnt+1))
done < <(eval "${SOURCE_CMD}")

UPDATED=`LC_ALL=C /bin/date '+%A, %d %B %Y at %H:%M'`

UPTIME=${result[2]}
SYSTEM=${result[3]}
UPTIME=`echo ${UPTIME} | sed 's/\\//\\\\\//g'`
SYSTEM=`echo ${SYSTEM} | sed 's/\\//\\\\\//g'`
if [ ${OUTPUT} = 'O' ]; then
	VALUE="${result[1]}"
elif [ ${OUTPUT} = 'I' ]; then
	VALUE="${result[0]}"
elif [ ${OUTPUT} = 'R' ]; then
	VALUE="${result[1]}:${result[0]}"
else
	VALUE="${result[0]}:${result[1]}"
fi

rrdtool update ${DBDIR}/${RRDFILE} "N:${VALUE}"

# graph - x-grid for more like MRTG grids?
# http://rrdtool.vandenbogaerdt.nl/tutorial/x-grid.php


# daily graph
cnt=1
while [ ${cnt} -le 8 ]; do
	result[$cnt]=''
	cnt=$((cnt+1))
done
DEF_O="DEF:tmp_o=${DBDIR}/${RRDFILE}:out:AVERAGE:start=end-33h"
DEF_I="DEF:tmp_i=${DBDIR}/${RRDFILE}:in:AVERAGE:start=end-33h"
CDEF_O="CDEF:Out=tmp_o,${FACTOR},*"
CDEF_I="CDEF:In=tmp_i,${FACTOR},*"
VDEF_O="VDEF:min_o=Out,MINIMUM VDEF:max_o=Out,MAXIMUM VDEF:avg_o=Out,AVERAGE VDEF:last_o=Out,LAST"
VDEF_I="VDEF:min_i=In,MINIMUM VDEF:max_i=In,MAXIMUM VDEF:avg_i=In,AVERAGE VDEF:last_i=In,LAST"
DRAW_O="LINE1:Out#0400ff:Out-Label"
DRAW_I="AREA:In#00ff00:In-Label"
PRINT_O="PRINT:min_o:%2.1lf\x20${UNIT_OUT} PRINT:max_o:%2.1lf\x20${UNIT_OUT} PRINT:avg_o:%2.1lf\x20${UNIT_OUT} PRINT:last_o:%2.1lf\x20${UNIT_OUT}"
PRINT_I="PRINT:min_i:%2.1lf\x20${UNIT_IN} PRINT:max_i:%2.1lf\x20${UNIT_IN} PRINT:avg_i:%2.1lf\x20${UNIT_IN} PRINT:last_i:%2.1lf\x20${UNIT_IN}"
if [ ${OUTPUT} = 'O' ]; then
	DEF=${DEF_O}
	CDEF=${CDEF_O}
	VDEF=${VDEF_O}
	DRAW=${DRAW_O}
	PRINT=${PRINT_O}
elif [ ${OUTPUT} = 'I' ]; then
	DEF=${DEF_I}
	CDEF=${CDEF_I}
	VDEF=${VDEF_I}
	DRAW=${DRAW_I}
	PRINT=${PRINT_I}
else
	DEF="${DEF_I} ${DEF_O}"
	CDEF="${CDEF_I} ${CDEF_O}"
	VDEF="${VDEF_I} ${VDEF_O}"
	DRAW="${DRAW_I} ${DRAW_O}"
	PRINT="${PRINT_I} ${PRINT_O}"
fi
cnt=0
while read -r line; do
	result[$cnt]=${line}
	cnt=$((cnt+1))
done < <(rrdtool graph ${OUTPUTDIR}/${BASENAME}-day.png -a PNG \
	--slope-mode \
	--no-legend \
	--start end-33h \
	--disable-rrdtool-tag \
	--upper-limit 0 --lower-limit 0 \
	${DEF} \
	${CDEF} \
	${VDEF} \
	${DRAW} \
	${PRINT} \
	VRULE:$LAST_MIDNIGHT#FF0000 \
	VRULE:$PREV_MIDNIGHT#FF0000 )


if [ ${OUTPUT} = 'O' ]; then
	D_MIN_O=${result[1]}
	D_MAX_O=${result[2]}
	D_AVG_O=${result[3]}
	D_CUR_O=${result[4]}
elif [ ${OUTPUT} = 'I' ]; then
	D_MIN_I=${result[1]}
	D_MAX_I=${result[2]}
	D_AVG_I=${result[3]}
	D_CUR_I=${result[4]}
else
	D_MIN_I=${result[1]}
	D_MAX_I=${result[2]}
	D_AVG_I=${result[3]}
	D_CUR_I=${result[4]}
	D_MIN_O=${result[5]}
	D_MAX_O=${result[6]}
	D_AVG_O=${result[7]}
	D_CUR_O=${result[8]}
fi

# weekly graph
cnt=1
while [ ${cnt} -le 8 ]; do
	result[$cnt]=''
	cnt=$((cnt+1))
done
DEF_O="DEF:tmp_o=${DBDIR}/${RRDFILE}:out:AVERAGE:start=end-200h"
DEF_I="DEF:tmp_i=${DBDIR}/${RRDFILE}:in:AVERAGE:start=end-200h"
if [ ${OUTPUT} = 'O' ]; then
	DEF=${DEF_O}
elif [ ${OUTPUT} = 'I' ]; then
	DEF=${DEF_I}
else
	DEF="${DEF_I} ${DEF_O}"
fi
cnt=0
while read -r line; do
	result[$cnt]=${line}
	cnt=$((cnt+1))
done < <(rrdtool graph ${OUTPUTDIR}/${BASENAME}-week.png -a PNG \
	--slope-mode \
	--no-legend \
	--start end-200h \
	--disable-rrdtool-tag \
	--upper-limit 0 --lower-limit 0 \
	${DEF} \
	${CDEF} \
	${VDEF} \
	${DRAW} \
	${PRINT} \
	VRULE:$LAST_WEEK#FF0000 \
	VRULE:$PREV_WEEK#FF0000 )

if [ ${OUTPUT} = 'O' ]; then
	W_MIN_O=${result[1]}
	W_MAX_O=${result[2]}
	W_AVG_O=${result[3]}
	W_CUR_O=${result[4]}
elif [ ${OUTPUT} = 'I' ]; then
	W_MIN_I=${result[1]}
	W_MAX_I=${result[2]}
	W_AVG_I=${result[3]}
	W_CUR_I=${result[4]}
else
	W_MIN_I=${result[1]}
	W_MAX_I=${result[2]}
	W_AVG_I=${result[3]}
	W_CUR_I=${result[4]}
	W_MIN_O=${result[5]}
	W_MAX_O=${result[6]}
	W_AVG_O=${result[7]}
	W_CUR_O=${result[8]}
fi

# monthly graph
cnt=1
while [ ${cnt} -le 8 ]; do
	result[$cnt]=''
	cnt=$((cnt+1))
done
DEF_O="DEF:tmp_o=${DBDIR}/${RRDFILE}:out:AVERAGE:start=end-5w"
DEF_I="DEF:tmp_i=${DBDIR}/${RRDFILE}:in:AVERAGE:start=end-5w"
if [ ${OUTPUT} = 'O' ]; then
	DEF=${DEF_O}
elif [ ${OUTPUT} = 'I' ]; then
	DEF=${DEF_I}
else
	DEF="${DEF_I} ${DEF_O}"
fi
cnt=0
while read -r line; do
	result[$cnt]=${line}
	cnt=$((cnt+1))
done < <(rrdtool graph ${OUTPUTDIR}/${BASENAME}-month.png -a PNG \
	--slope-mode \
	--no-legend \
	--start end-5w \
	--disable-rrdtool-tag \
	--upper-limit 0 --lower-limit 0 \
	${DEF} \
	${CDEF} \
	${VDEF} \
	${DRAW} \
	${PRINT} \
	VRULE:$LAST_MONTH#FF0000 \
	VRULE:$PREV_MONTH#FF0000 )

if [ ${OUTPUT} = 'O' ]; then
	M_MIN_O=${result[1]}
	M_MAX_O=${result[2]}
	M_AVG_O=${result[3]}
	M_CUR_O=${result[4]}
elif [ ${OUTPUT} = 'I' ]; then
	M_MIN_I=${result[1]}
	M_MAX_I=${result[2]}
	M_AVG_I=${result[3]}
	M_CUR_I=${result[4]}
else
	M_MIN_I=${result[1]}
	M_MAX_I=${result[2]}
	M_AVG_I=${result[3]}
	M_CUR_I=${result[4]}
	M_MIN_O=${result[5]}
	M_MAX_O=${result[6]}
	M_AVG_O=${result[7]}
	M_CUR_O=${result[8]}
fi

# yearly graph (end-1y == 12 months)
cnt=1
while [ ${cnt} -le 8 ]; do
	result[$cnt]=''
	cnt=$((cnt+1))
done
DEF_O="DEF:tmp_o=${DBDIR}/${RRDFILE}:out:AVERAGE:start=end-56w"
DEF_I="DEF:tmp_i=${DBDIR}/${RRDFILE}:in:AVERAGE:start=end-56w"
if [ ${OUTPUT} = 'O' ]; then
	DEF=${DEF_O}
elif [ ${OUTPUT} = 'I' ]; then
	DEF=${DEF_I}
else
	DEF="${DEF_I} ${DEF_O}"
fi
cnt=0
while read -r line; do
	result[$cnt]=${line}
	cnt=$((cnt+1))
done < <(rrdtool graph ${OUTPUTDIR}/${BASENAME}-year.png -a PNG \
	--slope-mode \
	--no-legend \
	--start end-56w \
	--disable-rrdtool-tag \
	--upper-limit 0 --lower-limit 0 \
	${DEF} \
	${CDEF} \
	${VDEF} \
	${DRAW} \
	${PRINT} \
	VRULE:$LAST_YEAR#FF0000 \
	VRULE:$PREV_YEAR#FF0000 )

if [ ${OUTPUT} = 'O' ]; then
	Y_MIN_O=${result[1]}
	Y_MAX_O=${result[2]}
	Y_AVG_O=${result[3]}
	Y_CUR_O=${result[4]}
elif [ ${OUTPUT} = 'I' ]; then
	Y_MIN_I=${result[1]}
	Y_MAX_I=${result[2]}
	Y_AVG_I=${result[3]}
	Y_CUR_I=${result[4]}
else
	Y_MIN_I=${result[1]}
	Y_MAX_I=${result[2]}
	Y_AVG_I=${result[3]}
	Y_CUR_I=${result[4]}
	Y_MIN_O=${result[5]}
	Y_MAX_O=${result[6]}
	Y_AVG_O=${result[7]}
	Y_CUR_O=${result[8]}
fi

##################################

cd ${OUTPUTDIR}
cat ${BASEDIR}/mrtgLikeRRD.tpl | /bin/sed -re "s/###UPDATED###/${UPDATED}/" | \
	/bin/sed -re "s/###BASENAME###/${BASENAME}/" | \
	/bin/sed -re "s/###DEVICE###/${SYSTEM}/" | \
	/bin/sed -re "s/###UPTIME###/${UPTIME}/" | \
	/bin/sed -re "s/###PAGETITLE###/${PAGETITLE}/" | \
	/bin/sed -re "s/###D_MIN_I###/${D_MIN_I}/" | \
	/bin/sed -re "s/###D_MAX_I###/${D_MAX_I}/" | \
	/bin/sed -re "s/###D_AVG_I###/${D_AVG_I}/" | \
	/bin/sed -re "s/###D_CUR_I###/${D_CUR_I}/" | \
	/bin/sed -re "s/###M_MIN_I###/${M_MIN_I}/" | \
	/bin/sed -re "s/###M_MAX_I###/${M_MAX_I}/" | \
	/bin/sed -re "s/###M_AVG_I###/${M_AVG_I}/" | \
	/bin/sed -re "s/###M_CUR_I###/${M_CUR_I}/" | \
	/bin/sed -re "s/###Y_MIN_I###/${Y_MIN_I}/" | \
	/bin/sed -re "s/###Y_MAX_I###/${Y_MAX_I}/" | \
	/bin/sed -re "s/###Y_AVG_I###/${Y_AVG_I}/" | \
	/bin/sed -re "s/###Y_CUR_I###/${Y_CUR_I}/" | \
	/bin/sed -re "s/###W_MIN_I###/${W_MIN_I}/" | \
	/bin/sed -re "s/###W_MAX_I###/${W_MAX_I}/" | \
	/bin/sed -re "s/###W_AVG_I###/${W_AVG_I}/" | \
	/bin/sed -re "s/###W_CUR_I###/${W_CUR_I}/" | \
	/bin/sed -re "s/###D_MIN_O###/${D_MIN_O}/" | \
	/bin/sed -re "s/###D_MAX_O###/${D_MAX_O}/" | \
	/bin/sed -re "s/###D_AVG_O###/${D_AVG_O}/" | \
	/bin/sed -re "s/###D_CUR_O###/${D_CUR_O}/" | \
	/bin/sed -re "s/###M_MIN_O###/${M_MIN_O}/" | \
	/bin/sed -re "s/###M_MAX_O###/${M_MAX_O}/" | \
	/bin/sed -re "s/###M_AVG_O###/${M_AVG_O}/" | \
	/bin/sed -re "s/###M_CUR_O###/${M_CUR_O}/" | \
	/bin/sed -re "s/###Y_MIN_O###/${Y_MIN_O}/" | \
	/bin/sed -re "s/###Y_MAX_O###/${Y_MAX_O}/" | \
	/bin/sed -re "s/###Y_AVG_O###/${Y_AVG_O}/" | \
	/bin/sed -re "s/###Y_CUR_O###/${Y_CUR_O}/" | \
	/bin/sed -re "s/###W_MIN_O###/${W_MIN_O}/" | \
	/bin/sed -re "s/###W_MAX_O###/${W_MAX_O}/" | \
	/bin/sed -re "s/###W_AVG_O###/${W_AVG_O}/" | \
	/bin/sed -re "s/###W_CUR_O###/${W_CUR_O}/" | \
	/bin/sed -re "s/###IN_DESC_SHORT###/${IN_SHORT}/" | \
	/bin/sed -re "s/###OUT_DESC_SHORT###/${OUT_SHORT}/" | \
	/bin/sed -re "s/###IN_DESC_LONG###/${IN_LONG}/" | \
	/bin/sed -re "s/###OUT_DESC_LONG###/${OUT_LONG}/" | \
	/bin/sed -re ${IN_RE} | \
	/bin/sed -re ${OUT_RE} \
	> ${BASENAME}.html

# mrtgLikeRRD Copyright (C) 2021 Armin Fuerst (armin@fuerst.priv.at)
# This script is part of a collection of scripts to emulate creation
# of MRTG like pages while using RRDTool as a backend.
# This script collects values from sources, puts them into the RRD file
# and creates the page for this source.
# 
# mrtgLikeRRD simplifies adding additional sources to a collection
# of pages being created. It tries do create pages being as close
# as possible to MRTG.
# mrtgLikeRRD limits the functionality of RRDTool - RRDTool has many
# additional features you cannot use with mrtgLikeRRD. Especially the
# advantage of separating data collection from generation of the pages
# is not supported by mrtgLikeRRD.
# Following advantages of RRDTool are available to mrtgLikeRRD:
# + support of negative figures
# + support of float values (GAUGE)
# + support of missing values
#
# mrtgLikeRRD is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# mrtgLikeRRD is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with tempersensor.  If not, see <https://www.gnu.org/licenses/>.
#
#
# Why did I put the license notice at the bottom of the file?
# Because most of the time, when you open the file, the probability
# you want to know about the license is very little. If you open the
# file to learn about the license, it is still easy to find.
#
# Perhaps you want to have a look at the talk "Clean Coders Hate What 
# Happens to Your Code When You Use These Enterprise Programming Tricks"
# from Kevlin Henney at the NDC Conferences in London, January 16th-20th 
# 2017. While watching the whole talk is a good idea, starting at around 
# 27:50 provides some input what to put on the top of source code files.

